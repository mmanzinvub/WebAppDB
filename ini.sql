ALTER TABLE table_order_items
    DROP CONSTRAINT table_order_items_fk1;

DROP TABLE table_order_items CASCADE CONSTRAINTS;
DROP TABLE table_orders CASCADE CONSTRAINTS;
DROP TABLE table_customers CASCADE CONSTRAINTS;
DROP TABLE table_cameras CASCADE CONSTRAINTS;
DROP TABLE table_lenses CASCADE CONSTRAINTS;
DROP TABLE table_equipment CASCADE CONSTRAINTS;
DROP TABLE table_films CASCADE CONSTRAINTS;

CREATE TABLE table_cameras
(
    camera_id  number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    image_url  varchar2(200),
    category   varchar2(50),
    name       varchar2(100)                                  NOT NULL,
    price      number(10, 2)                                  NOT NULL,
    stock      number(10, 0) DEFAULT 0 NOT NULL,
    created_at date       DEFAULT SYSDATE                     NOT NULL,
    updated_at date
);

CREATE TABLE table_lenses
(
    lens_id    number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    image_url  varchar2(200),
    category   varchar2(50),
    aperture   varchar2(50)                                   NOT NULL,
    name       varchar2(100)                                  NOT NULL,
    price      number(10, 2)                                  NOT NULL,
    stock      number(10, 0) DEFAULT 0                        NOT NULL,
    created_at date          DEFAULT SYSDATE                  NOT NULL,
    updated_at date
);

CREATE TABLE table_equipment
(
    table_equipment_id number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    image_url    varchar2(200),
    category     varchar2(50),
    name         varchar2(100)                                  NOT NULL,
    price        number(10, 2)                                  NOT NULL,
    stock        number(10, 0) DEFAULT 0                        NOT NULL,
    created_at   date          DEFAULT SYSDATE                  NOT NULL,
    updated_at   date
);

CREATE TABLE table_films
(
    film_id    number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    image_url  varchar2(200),
    category   varchar2(50),
    name       varchar2(100)                                  NOT NULL,
    price      number(10, 2)                                  NOT NULL,
    stock      number(10, 0) DEFAULT 0                        NOT NULL,
    created_at date          DEFAULT SYSDATE                  NOT NULL,
    updated_at date
);

CREATE TABLE table_customers
(
    customer_id number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    first_name  varchar2(50),
    last_name   varchar2(50),
    email       varchar2(100)                                  NOT NULL UNIQUE,
    password    varchar2(100)                                  NOT NULL,
    address     varchar2(200),
    city        varchar2(50),
    zip         varchar2(10),
    created_at  date DEFAULT SYSDATE                           NOT NULL,
    updated_at  date
);

CREATE TABLE table_orders
(
    order_id         number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    customer_id      number(10)                                     NOT NULL,
    order_date       date                                           NOT NULL,
    status           varchar2(20)                                   NOT NULL,
    total_amount     number(10, 2)                                  NOT NULL,
    shipping_address varchar2(200),
    payment_method   varchar2(30),
    created_at       date DEFAULT SYSDATE                           NOT NULL,
    updated_at       date
);

CREATE TABLE table_order_items
(
    order_item_id number(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
    order_id      number(10)                                     NOT NULL,
    product_type  varchar2(20)                                   NOT NULL,
    product_id    number(10)                                     NOT NULL,
    quantity      number(10)                                     NOT NULL,
    unit_price    number(10, 2)                                  NOT NULL,
    total_price   number(10, 2)                                  NOT NULL,
    created_at    date DEFAULT SYSDATE                           NOT NULL,
    updated_at    date
);

-- constraints
ALTER TABLE table_cameras
    ADD CONSTRAINT ck_priceC CHECK (price > 0);
ALTER TABLE table_cameras
    ADD CONSTRAINT ck_stockC CHECK (stock >= 0);

ALTER TABLE table_lenses
    ADD CONSTRAINT ck_priceL CHECK (price > 0);
ALTER TABLE table_lenses
    ADD CONSTRAINT ck_stockL CHECK (stock >= 0);

ALTER TABLE table_equipment
    ADD CONSTRAINT ck_priceE CHECK (price > 0);
ALTER TABLE table_equipment
    ADD CONSTRAINT ck_stockE CHECK (stock >= 0);

ALTER TABLE table_films
    ADD CONSTRAINT ck_priceF CHECK (price > 0);
ALTER TABLE table_films
    ADD CONSTRAINT ck_stockF CHECK (stock >= 0);

ALTER TABLE table_orders
    ADD CONSTRAINT table_orders_fk1 FOREIGN KEY (customer_id) REFERENCES table_customers (customer_id);
ALTER TABLE table_orders
    ADD CONSTRAINT ck_table_orders_status
        CHECK (status IN ('Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'));
ALTER TABLE table_orders
    ADD CONSTRAINT ck_total_amount
        CHECK (total_amount >= 0);

ALTER TABLE table_order_items
    ADD CONSTRAINT table_order_items_fk1 FOREIGN KEY (order_id) REFERENCES table_orders (order_id) ON DELETE CASCADE;
ALTER TABLE table_order_items
    ADD CONSTRAINT ck_table_order_items_quantity
        CHECK (quantity > 0);
ALTER TABLE table_order_items
    ADD CONSTRAINT ck_table_order_items_unit_price
        CHECK (unit_price >= 0);
ALTER TABLE table_order_items
    ADD CONSTRAINT ck_table_order_items_total_price
        CHECK (total_price >= 0);
ALTER TABLE table_order_items
    ADD CONSTRAINT ck_table_order_items_product_type
        CHECK (product_type IN ('Camera', 'Lens', 'Film', 'table_equipment'));

-- triggers
CREATE OR REPLACE TRIGGER table_cameras_before_update
    BEFORE UPDATE
    ON table_cameras
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;

CREATE OR REPLACE TRIGGER table_lenses_before_update
    BEFORE UPDATE
    ON table_lenses
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER table_films_before_update
    BEFORE UPDATE
    ON table_films
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER table_equipment_before_update
    BEFORE UPDATE
    ON table_equipment
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER table_customers_before_update
    BEFORE UPDATE
    ON table_customers
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER table_orders_before_update
    BEFORE UPDATE
    ON table_orders
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER table_order_items_before_update
    BEFORE UPDATE
    ON table_order_items
    FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/